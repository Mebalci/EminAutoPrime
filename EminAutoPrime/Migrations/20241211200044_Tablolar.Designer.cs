// <auto-generated />
using System;
using EminAutoPrime.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EminAutoPrime.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241211200044_Tablolar")]
    partial class Tablolar
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EminAutoPrime.Models.AracMarkalari", b =>
                {
                    b.Property<int>("MarkaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MarkaId"));

                    b.Property<string>("MarkaAdi")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MarkaId");

                    b.ToTable("AracMarkalari");
                });

            modelBuilder.Entity("EminAutoPrime.Models.AracModelleri", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModelId"));

                    b.Property<int>("MarkaId")
                        .HasColumnType("int");

                    b.Property<string>("ModelAdi")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ModelId");

                    b.HasIndex("MarkaId");

                    b.ToTable("AracModelleri");
                });

            modelBuilder.Entity("EminAutoPrime.Models.Araclar", b =>
                {
                    b.Property<int>("AracId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AracId"));

                    b.Property<int>("MarkaId")
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("Plaka")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SahipId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Yil")
                        .HasColumnType("int");

                    b.HasKey("AracId");

                    b.HasIndex("MarkaId");

                    b.HasIndex("ModelId");

                    b.HasIndex("SahipId");

                    b.ToTable("Araclar");
                });

            modelBuilder.Entity("EminAutoPrime.Models.Kampanya", b =>
                {
                    b.Property<int>("KampanyaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KampanyaID"));

                    b.Property<DateTime?>("BaslangicTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BitisTarihi")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("GorselVerisi")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("KampanyaAciklamasi")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("KampanyaBasligi")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("KampanyaID");

                    b.ToTable("Kampanyalar");
                });

            modelBuilder.Entity("EminAutoPrime.Models.ParcaKategorileri", b =>
                {
                    b.Property<int>("KategoriId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KategoriId"));

                    b.Property<string>("KategoriAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KategoriId");

                    b.ToTable("ParcaKategorileri");
                });

            modelBuilder.Entity("EminAutoPrime.Models.Parcalar", b =>
                {
                    b.Property<int>("ParcaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParcaId"));

                    b.Property<decimal>("Fiyat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("KategoriId")
                        .HasColumnType("int");

                    b.Property<string>("ParcaAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StokMiktari")
                        .HasColumnType("int");

                    b.HasKey("ParcaId");

                    b.HasIndex("KategoriId");

                    b.ToTable("Parcalar");
                });

            modelBuilder.Entity("EminAutoPrime.Models.RandevuDurumlari", b =>
                {
                    b.Property<int>("DurumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DurumId"));

                    b.Property<string>("DurumAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DurumId");

                    b.ToTable("RandevuDurumlari");
                });

            modelBuilder.Entity("EminAutoPrime.Models.Randevular", b =>
                {
                    b.Property<int>("RandevuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RandevuId"));

                    b.Property<string>("Aciklama")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AracId")
                        .HasColumnType("int");

                    b.Property<int>("DurumId")
                        .HasColumnType("int");

                    b.Property<string>("MusteriId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RandevuTarihi")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServisAlaniId")
                        .HasColumnType("int");

                    b.Property<int?>("ServisDurumlariDurumId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TalepTarihi")
                        .HasColumnType("datetime2");

                    b.HasKey("RandevuId");

                    b.HasIndex("AracId");

                    b.HasIndex("DurumId");

                    b.HasIndex("MusteriId");

                    b.HasIndex("ServisAlaniId");

                    b.HasIndex("ServisDurumlariDurumId");

                    b.ToTable("Randevular");
                });

            modelBuilder.Entity("EminAutoPrime.Models.ServisAlanlari", b =>
                {
                    b.Property<int>("ServisAlaniId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServisAlaniId"));

                    b.Property<string>("ServisAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServisAlaniId");

                    b.ToTable("ServisAlanlari");
                });

            modelBuilder.Entity("EminAutoPrime.Models.ServisDurumlari", b =>
                {
                    b.Property<int>("DurumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DurumId"));

                    b.Property<string>("DurumAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DurumId");

                    b.ToTable("ServisDurumlari");
                });

            modelBuilder.Entity("EminAutoPrime.Models.ServisIslemTipleri", b =>
                {
                    b.Property<int>("IslemTipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IslemTipId"));

                    b.Property<string>("IslemAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IslemTipId");

                    b.ToTable("ServisIslemTipleri");
                });

            modelBuilder.Entity("EminAutoPrime.Models.ServisIslemleri", b =>
                {
                    b.Property<int>("IslemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IslemId"));

                    b.Property<string>("CalisanId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IslemAciklama")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("IslemMaliyeti")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("IslemTarihi")
                        .HasColumnType("datetime2");

                    b.Property<int>("IslemTipId")
                        .HasColumnType("int");

                    b.Property<int>("ServisAlaniId")
                        .HasColumnType("int");

                    b.Property<int>("ServisId")
                        .HasColumnType("int");

                    b.Property<int?>("TakilanParcaId")
                        .HasColumnType("int");

                    b.HasKey("IslemId");

                    b.HasIndex("CalisanId");

                    b.HasIndex("IslemTipId");

                    b.HasIndex("ServisAlaniId");

                    b.HasIndex("ServisId");

                    b.HasIndex("TakilanParcaId");

                    b.ToTable("ServisIslemleri");
                });

            modelBuilder.Entity("EminAutoPrime.Models.ServisKayitlari", b =>
                {
                    b.Property<int>("ServisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServisId"));

                    b.Property<string>("Aciklama")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AracId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BaslangicTarihi")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurumId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TahminiBitisTarihi")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ToplamMaliyet")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ServisId");

                    b.HasIndex("AracId");

                    b.HasIndex("DurumId");

                    b.ToTable("ServisKayitlari");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EminAutoPrime.Models.AracModelleri", b =>
                {
                    b.HasOne("EminAutoPrime.Models.AracMarkalari", "Marka")
                        .WithMany("Modeller")
                        .HasForeignKey("MarkaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Marka");
                });

            modelBuilder.Entity("EminAutoPrime.Models.Araclar", b =>
                {
                    b.HasOne("EminAutoPrime.Models.AracMarkalari", "Marka")
                        .WithMany()
                        .HasForeignKey("MarkaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EminAutoPrime.Models.AracModelleri", "Model")
                        .WithMany("Araclar")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Sahip")
                        .WithMany()
                        .HasForeignKey("SahipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Marka");

                    b.Navigation("Model");

                    b.Navigation("Sahip");
                });

            modelBuilder.Entity("EminAutoPrime.Models.Parcalar", b =>
                {
                    b.HasOne("EminAutoPrime.Models.ParcaKategorileri", "Kategori")
                        .WithMany("Parcalar")
                        .HasForeignKey("KategoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kategori");
                });

            modelBuilder.Entity("EminAutoPrime.Models.Randevular", b =>
                {
                    b.HasOne("EminAutoPrime.Models.Araclar", "Arac")
                        .WithMany()
                        .HasForeignKey("AracId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EminAutoPrime.Models.RandevuDurumlari", "Durum")
                        .WithMany("Randevular")
                        .HasForeignKey("DurumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Musteri")
                        .WithMany()
                        .HasForeignKey("MusteriId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EminAutoPrime.Models.ServisAlanlari", "ServisAlani")
                        .WithMany("Randevular")
                        .HasForeignKey("ServisAlaniId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EminAutoPrime.Models.ServisDurumlari", null)
                        .WithMany("Randevular")
                        .HasForeignKey("ServisDurumlariDurumId");

                    b.Navigation("Arac");

                    b.Navigation("Durum");

                    b.Navigation("Musteri");

                    b.Navigation("ServisAlani");
                });

            modelBuilder.Entity("EminAutoPrime.Models.ServisIslemleri", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Calisan")
                        .WithMany()
                        .HasForeignKey("CalisanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EminAutoPrime.Models.ServisIslemTipleri", "IslemTip")
                        .WithMany("ServisIslemleri")
                        .HasForeignKey("IslemTipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EminAutoPrime.Models.ServisAlanlari", "ServisAlani")
                        .WithMany("ServisIslemleri")
                        .HasForeignKey("ServisAlaniId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EminAutoPrime.Models.ServisKayitlari", "Servis")
                        .WithMany("ServisIslemleri")
                        .HasForeignKey("ServisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EminAutoPrime.Models.Parcalar", "TakilanParca")
                        .WithMany("ServisIslemleri")
                        .HasForeignKey("TakilanParcaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Calisan");

                    b.Navigation("IslemTip");

                    b.Navigation("Servis");

                    b.Navigation("ServisAlani");

                    b.Navigation("TakilanParca");
                });

            modelBuilder.Entity("EminAutoPrime.Models.ServisKayitlari", b =>
                {
                    b.HasOne("EminAutoPrime.Models.Araclar", "Arac")
                        .WithMany()
                        .HasForeignKey("AracId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EminAutoPrime.Models.ServisDurumlari", "Durum")
                        .WithMany("ServisKayitlari")
                        .HasForeignKey("DurumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arac");

                    b.Navigation("Durum");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EminAutoPrime.Models.AracMarkalari", b =>
                {
                    b.Navigation("Modeller");
                });

            modelBuilder.Entity("EminAutoPrime.Models.AracModelleri", b =>
                {
                    b.Navigation("Araclar");
                });

            modelBuilder.Entity("EminAutoPrime.Models.ParcaKategorileri", b =>
                {
                    b.Navigation("Parcalar");
                });

            modelBuilder.Entity("EminAutoPrime.Models.Parcalar", b =>
                {
                    b.Navigation("ServisIslemleri");
                });

            modelBuilder.Entity("EminAutoPrime.Models.RandevuDurumlari", b =>
                {
                    b.Navigation("Randevular");
                });

            modelBuilder.Entity("EminAutoPrime.Models.ServisAlanlari", b =>
                {
                    b.Navigation("Randevular");

                    b.Navigation("ServisIslemleri");
                });

            modelBuilder.Entity("EminAutoPrime.Models.ServisDurumlari", b =>
                {
                    b.Navigation("Randevular");

                    b.Navigation("ServisKayitlari");
                });

            modelBuilder.Entity("EminAutoPrime.Models.ServisIslemTipleri", b =>
                {
                    b.Navigation("ServisIslemleri");
                });

            modelBuilder.Entity("EminAutoPrime.Models.ServisKayitlari", b =>
                {
                    b.Navigation("ServisIslemleri");
                });
#pragma warning restore 612, 618
        }
    }
}
